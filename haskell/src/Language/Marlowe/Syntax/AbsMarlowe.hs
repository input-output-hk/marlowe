-- File generated by the BNF Converter (bnfc 2.9.4).

-- | The abstract syntax of language Marlowe.

module Language.Marlowe.Syntax.AbsMarlowe where

import Prelude (Integer, String)
import qualified Prelude as C (Eq, Ord, Show, Read)

data Contract
    = Close
    | Pay Party Payee Token Value Contract
    | If Observation Contract Contract
    | When [Case] Timeout Contract
    | Let ValueId Value Contract
    | Assert Observation Contract
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Case = Case Action Contract | MerkleizedCase Action String
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Action
    = Deposit Party Party Token Value
    | Choice ChoiceId [Bound]
    | Notify Observation
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Value
    = AvailableMoney Party Token
    | Constant Integer
    | NegValue Value
    | AddValue Value Value
    | SubValue Value Value
    | MulValue Value Value
    | DivValue Value Value
    | ChoiceValue ChoiceId
    | TimeIntervalStart
    | TimeIntervalEnd
    | UseValue ValueId
    | Cond Observation Value Value
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Observation
    = AndObs Observation Observation
    | OrObs Observation Observation
    | NotObs Observation
    | ChoseSomething ChoiceId
    | ValueGE Value Value
    | ValueGT Value Value
    | ValueLT Value Value
    | ValueLE Value Value
    | ValueEQ Value Value
    | TrueObs
    | FalseObs
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Party = Address String | Role String
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Payee = Account Party | Party Party
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Timeout = Timeout Integer
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Bound = Bound Integer Integer
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Token = Token String String
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data ChoiceId = ChoiceId String Party
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data ValueId = ValueId String
  deriving (C.Eq, C.Ord, C.Show, C.Read)

